import { useState, useCallback } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { FurnitureSpace, Dimensions, PieceType, FurniturePiece } from '../types/furniture';
import { InsertionMode, InsertionContext } from '../types/insertion';
import { SpaceCuttingSystem } from '../utils/spaceCutting';

export const useSimplifiedFurnitureDesign = () => {
  const [defaultThickness, setDefaultThickness] = useState(18);
  // Usar mesma espessura para visual e corte - simplificado
  const [feedbackMessage, setFeedbackMessage] = useState<string | null>(null);
  
  const [mainSpace, setMainSpace] = useState<FurnitureSpace>({
    id: uuidv4(),
    name: 'M√≥vel Principal',
    originalDimensions: { width: 800, height: 2100, depth: 600 },
    currentDimensions: { width: 800, height: 2100, depth: 600 },
    position: { x: 0, y: 0, z: 0 },
    pieces: [],
    isActive: true,
  });

  const [activeSpaces, setActiveSpaces] = useState<FurnitureSpace[]>([]);
  const [selectedSpaceId, setSelectedSpaceId] = useState<string | null>(null);

  // Getter para compatibilidade - retorna o espa√ßo principal ou o primeiro espa√ßo ativo
  const space = activeSpaces.length > 0 ? 
    { ...mainSpace, subSpaces: activeSpaces } : 
    mainSpace;

  // Debug: verificar estado dos espa√ßos
  console.log('üè† Hook - Estado dos espa√ßos:', {
    mainSpace: {
      id: mainSpace.id,
      name: mainSpace.name,
      isActive: mainSpace.isActive,
      piecesCount: mainSpace.pieces.length
    },
    activeSpaces: {
      count: activeSpaces.length,
      spaces: activeSpaces.map(s => ({
        id: s.id,
        name: s.name,
        isActive: s.isActive,
        piecesCount: s.pieces.length,
        dimensions: s.currentDimensions
      }))
    },
    spaceObject: {
      id: space.id,
      name: space.name,
      subSpacesCount: space.subSpaces?.length || 0
    }
  });

  // Fun√ß√£o para obter o espa√ßo selecionado
  const getSelectedSpace = useCallback((): FurnitureSpace | null => {
    if (!selectedSpaceId) return null;
    
    // Verificar se √© o espa√ßo principal
    if (selectedSpaceId === mainSpace.id) {
      return mainSpace;
    }
    
    // Verificar se √© um dos espa√ßos ativos
    return activeSpaces.find(s => s.id === selectedSpaceId) || null;
  }, [selectedSpaceId, mainSpace, activeSpaces]);

  // Fun√ß√£o para selecionar um espa√ßo
  const selectSpace = useCallback((spaceId: string | null) => {
    setSelectedSpaceId(spaceId);
    console.log('üéØ Espa√ßo selecionado:', {
      spaceId,
      isMainSpace: spaceId === mainSpace.id,
      isChildSpace: activeSpaces.some(s => s.id === spaceId),
      availableSpaces: {
        main: mainSpace.id,
        children: activeSpaces.map(s => ({ id: s.id, name: s.name, isActive: s.isActive }))
      }
    });
  }, [mainSpace.id, activeSpaces]);

  console.log('üè† Estado atual:', {
    mainSpace: mainSpace.name,
    mainSpaceActive: mainSpace.isActive,
    activeSpacesCount: activeSpaces.length,
    totalPieces: mainSpace.pieces.length
  });

  const [insertionContext, setInsertionContext] = useState<InsertionContext>({
    mode: InsertionMode.STRUCTURAL,
  });

  const createNewSpace = useCallback((dimensions: Dimensions, name: string = 'Novo M√≥vel') => {
    const newSpace: FurnitureSpace = {
      id: uuidv4(),
      name,
      originalDimensions: dimensions,
      currentDimensions: dimensions,
      position: { x: 0, y: 0, z: 0 },
      pieces: [],
      isActive: true,
    };
    setMainSpace(newSpace);
    setActiveSpaces([]);
  }, []);

  const addPiece = useCallback((pieceType: PieceType, thickness?: number, customName?: string, cutThickness?: number) => {
    const finalThickness = thickness ?? defaultThickness;
    const finalCutThickness = cutThickness ?? defaultThickness; // Usar mesma espessura
    const isInternalPiece = [
      PieceType.SHELF,
      PieceType.DIVIDER_VERTICAL
    ].includes(pieceType);

    const isStructuralPiece = [
      PieceType.LATERAL_LEFT,
      PieceType.LATERAL_RIGHT,
      PieceType.LATERAL_FRONT,
      PieceType.LATERAL_BACK,
      PieceType.BOTTOM,
      PieceType.TOP
    ].includes(pieceType);

    // Para pe√ßas internas ou estruturais, usar o espa√ßo selecionado ou o principal
    let targetSpace: FurnitureSpace;
    const selectedSpace = getSelectedSpace();
    if (isInternalPiece || isStructuralPiece) {
      console.log('üîç Verificando espa√ßo para pe√ßa:', {
        pieceType,
        isInternal: isInternalPiece,
        isStructural: isStructuralPiece,
        selectedSpace: selectedSpace?.name,
        selectedSpaceActive: selectedSpace?.isActive,
        activeSpacesCount: activeSpaces.length,
        mainSpaceActive: mainSpace.isActive
      });
      
      if (selectedSpace && selectedSpace.isActive !== false) {
        targetSpace = selectedSpace;
        console.log('‚úÖ Usando espa√ßo selecionado:', targetSpace.name);
      } else if (activeSpaces.length > 0) {
        targetSpace = activeSpaces[0];
        console.log('‚úÖ Usando primeiro espa√ßo ativo:', targetSpace.name);
      } else if (mainSpace.isActive !== false) {
        targetSpace = mainSpace;
        console.log('‚úÖ Usando espa√ßo principal:', targetSpace.name);
      } else {
        console.warn('‚ùå Nenhum espa√ßo dispon√≠vel para pe√ßas internas');
        setFeedbackMessage('‚ùå Nenhum espa√ßo dispon√≠vel para pe√ßas internas');
        setTimeout(() => setFeedbackMessage(null), 3000);
        return;
      }
      
      console.log('üìè Dimens√µes do espa√ßo alvo:', {
        width: targetSpace.currentDimensions.width,
        height: targetSpace.currentDimensions.height,
        depth: targetSpace.currentDimensions.depth,
        isValid: targetSpace.currentDimensions.width > 0 && 
                 targetSpace.currentDimensions.height > 0 && 
                 targetSpace.currentDimensions.depth > 0
      });
      
      if (targetSpace.currentDimensions.width <= 0 || 
          targetSpace.currentDimensions.height <= 0 || 
          targetSpace.currentDimensions.depth <= 0) {
        console.warn('‚ùå Espa√ßo selecionado n√£o dispon√≠vel. Adicione pe√ßas estruturais primeiro.');
        console.log('‚ùå Dimens√µes inv√°lidas:', {
          width: targetSpace.currentDimensions.width,
          height: targetSpace.currentDimensions.height,
          depth: targetSpace.currentDimensions.depth
        });
        setFeedbackMessage('‚ùå Espa√ßo interno n√£o dispon√≠vel. Adicione pe√ßas estruturais primeiro.');
        setTimeout(() => setFeedbackMessage(null), 3000);
        return;
      }
    } else {
      targetSpace = mainSpace;
    }

    const pieceNames: Record<PieceType, string> = {
      [PieceType.LATERAL_LEFT]: 'Lateral Esquerda',
      [PieceType.LATERAL_RIGHT]: 'Lateral Direita',
      [PieceType.LATERAL_FRONT]: 'Lateral Frontal',
      [PieceType.LATERAL_BACK]: 'Lateral Traseira',
      [PieceType.BOTTOM]: 'Fundo',
      [PieceType.TOP]: 'Tampo',
      [PieceType.SHELF]: 'Prateleira',
      [PieceType.DIVIDER_VERTICAL]: 'Divis√≥ria Vertical',
    };

    const pieceColors: Record<PieceType, string> = {
      [PieceType.LATERAL_LEFT]: '#8b5cf6',
      [PieceType.LATERAL_RIGHT]: '#8b5cf6',
      [PieceType.LATERAL_FRONT]: '#f59e0b',
      [PieceType.LATERAL_BACK]: '#f59e0b',
      [PieceType.BOTTOM]: '#ef4444',
      [PieceType.TOP]: '#ef4444',
      [PieceType.SHELF]: '#10b981',
      [PieceType.DIVIDER_VERTICAL]: '#3b82f6',
    };

    const newPiece: FurniturePiece = {
      id: uuidv4(),
      type: pieceType,
      name: customName || pieceNames[pieceType],
      thickness: finalThickness,
      color: pieceColors[pieceType],
      dimensions: { width: 0, height: 0, depth: 0 }, // Ser√° calculado pelo sistema
      position: { x: 0, y: 0, z: 0 }, // Ser√° calculado pelo sistema
    };

    // MELHORIA 1: Atribuir parentSpaceId correto j√° na cria√ß√£o (simplificado para evitar loops)
    if (isInternalPiece || isStructuralPiece) {
      // Para pe√ßas internas e estruturais, usar o espa√ßo alvo como parent
      newPiece.parentSpaceId = targetSpace.id;
    }

    console.log(`üîß Adicionando pe√ßa: visual=${finalThickness}mm, corte=${finalCutThickness}mm no espa√ßo:`, targetSpace.name);

    if (isInternalPiece) {
      // Para pe√ßas internas que dividem o espa√ßo
      console.log('üîß Iniciando divis√£o do espa√ßo para pe√ßa interna:', {
        pieceType,
        targetSpaceName: targetSpace.name,
        targetSpaceDimensions: targetSpace.currentDimensions,
        pieceThickness: finalCutThickness,
        targetSpaceId: targetSpace.id,
        mainSpaceId: mainSpace.id,
        isMainSpace: targetSpace.id === mainSpace.id
      });
      
      console.log('üîß Espa√ßo alvo antes da divis√£o:', {
        id: targetSpace.id,
        name: targetSpace.name,
        dimensions: targetSpace.currentDimensions,
        isActive: targetSpace.isActive,
        piecesCount: targetSpace.pieces.length
      });
      
      const dividedSpaces = SpaceCuttingSystem.divideSpace(targetSpace, newPiece, finalCutThickness);
      
      console.log('üì¶ Espa√ßos divididos criados:', {
        count: dividedSpaces.length,
        spaces: dividedSpaces.map(s => ({ name: s.name, dimensions: s.currentDimensions }))
      });
      
      if (dividedSpaces.length === 0) {
        console.warn('‚ùå Nenhum espa√ßo dividido foi criado');
        setFeedbackMessage('‚ùå Erro ao criar espa√ßos divididos');
        setTimeout(() => setFeedbackMessage(null), 3000);
        return;
      }
      
      // Calcular posi√ß√£o e dimens√µes da pe√ßa
      const piecePosition = SpaceCuttingSystem.calculatePiecePosition(targetSpace, newPiece);
      const pieceDimensions = SpaceCuttingSystem.calculatePieceDimensions(targetSpace, newPiece.type, finalThickness);
      
      const updatedPiece: FurniturePiece = {
        ...newPiece,
        position: piecePosition,
        dimensions: pieceDimensions,
      };

      // Atualizar espa√ßos ativos (remover o dividido, adicionar os novos)
      let newActiveSpaces;
      if (targetSpace.id === mainSpace.id) {
        newActiveSpaces = [
          ...activeSpaces,
          ...dividedSpaces
        ];
      } else {
        // Atualizar a pe√ßa no subespa√ßo correto
        setActiveSpaces(prevSpaces => prevSpaces.map(s =>
          s.id === targetSpace.id
            ? { ...s, pieces: [...s.pieces, updatedPiece] }
            : s
        ));
        // Substituir o subespa√ßo dividido pelos novos subespa√ßos
        newActiveSpaces = [
          ...activeSpaces.filter(s => s.id !== targetSpace.id),
          ...dividedSpaces
        ];
      }
      setActiveSpaces(newActiveSpaces);

      // Adicionar a pe√ßa ao espa√ßo dividido (sempre ao mainSpace)
      setMainSpace(prev => ({
        ...prev,
        pieces: [...prev.pieces, updatedPiece],
        // Marcar o espa√ßo principal como inativo quando dividido
        isActive: targetSpace.id === mainSpace.id ? false : prev.isActive,
      }));

      // Selecionar automaticamente o primeiro espa√ßo dividido
      if (dividedSpaces.length > 0) {
        setSelectedSpaceId(dividedSpaces[0].id);
      }
    } else {
      // Para pe√ßas estruturais, verificar se podem ser inseridas primeiro
      const isLateralPiece = [PieceType.LATERAL_LEFT, PieceType.LATERAL_RIGHT].includes(pieceType);
      if (isLateralPiece) {
        // Usar o espa√ßo alvo (pode ser interno ou principal)
        const canInsert = SpaceCuttingSystem.canInsertLateralPiece(targetSpace, pieceType, finalThickness);
        if (!canInsert) {
          console.warn('‚ùå N√£o h√° espa√ßo suficiente para inserir lateral');
          setFeedbackMessage(`‚ùå N√£o h√° espa√ßo suficiente para inserir ${newPiece.name}`);
          setTimeout(() => setFeedbackMessage(null), 3000);
          return;
        }
      }
      
      // Para pe√ßas estruturais, verificar colis√µes primeiro
      console.log('üîç Verificando colis√µes para pe√ßa estrutural:', newPiece.name);
      
      // Calcular posi√ß√£o e dimens√µes da pe√ßa estrutural
      const piecePosition = SpaceCuttingSystem.calculatePiecePosition(targetSpace, newPiece);
      const pieceDimensions = SpaceCuttingSystem.calculatePieceDimensions(targetSpace, newPiece.type, finalThickness);
      
      // Validar se a pe√ßa cabe na chapa padr√£o (s√≥ para pe√ßas no espa√ßo principal)
      if (targetSpace.id === mainSpace.id) {
        const sheetValidation = SpaceCuttingSystem.validatePieceSheet(newPiece.type, pieceDimensions);
        if (!sheetValidation.valido) {
          console.warn('‚ùå Pe√ßa n√£o cabe na chapa padr√£o:', sheetValidation.erro);
          setFeedbackMessage(`‚ùå ${sheetValidation.erro}`);
          setTimeout(() => setFeedbackMessage(null), 4000);
          return;
        }
      }
      
      // Criar pe√ßa tempor√°ria com posi√ß√£o e dimens√µes para verifica√ß√£o de colis√£o
      const tempPiece: FurniturePiece = {
        ...newPiece,
        position: piecePosition,
        dimensions: pieceDimensions,
      };
      
      // Verificar se h√° colis√£o com pe√ßas existentes no espa√ßo alvo
      const hasCollision = SpaceCuttingSystem.checkCollisionWithExistingPieces(tempPiece, targetSpace.pieces);
      
      console.log('üîç Resultado da verifica√ß√£o de colis√£o:', {
        pieceType: newPiece.type,
        pieceName: newPiece.name,
        targetSpace: targetSpace.name,
        hasCollision,
        existingPiecesCount: targetSpace.pieces.length,
        tempPiecePosition: tempPiece.position,
        tempPieceDimensions: tempPiece.dimensions
      });
      
      if (hasCollision) {
        console.warn('‚ö†Ô∏è Colis√£o detectada - tentando ajustar espessura automaticamente');
        
        // Calcular a espessura m√°xima permitida para evitar colis√µes
        const maxAllowedThickness = SpaceCuttingSystem.calculateMaxAllowedThickness(targetSpace, newPiece);
        
        if (maxAllowedThickness >= 1) {
          console.log(`‚úÇÔ∏è Reduzindo espessura de ${finalThickness}mm para ${maxAllowedThickness}mm`);
          
          // Criar pe√ßa com espessura ajustada
          const adjustedPiece: FurniturePiece = {
            ...newPiece,
            thickness: maxAllowedThickness,
          };
          
          // Recalcular posi√ß√£o e dimens√µes com nova espessura
          const adjustedPosition = SpaceCuttingSystem.calculatePiecePosition(targetSpace, adjustedPiece);
          const adjustedDimensions = SpaceCuttingSystem.calculatePieceDimensions(targetSpace, adjustedPiece.type, maxAllowedThickness);
          
          const finalAdjustedPiece: FurniturePiece = {
            ...adjustedPiece,
            position: adjustedPosition,
            dimensions: adjustedDimensions,
          };
          
          // Verificar se ainda h√° colis√£o ap√≥s o ajuste
          const stillHasCollision = SpaceCuttingSystem.checkCollisionWithExistingPieces(finalAdjustedPiece, targetSpace.pieces);
          const isWithinBounds = SpaceCuttingSystem.isPieceWithinSpaceBounds(targetSpace, finalAdjustedPiece);
          
          if (!stillHasCollision && isWithinBounds) {
            console.log('‚úÖ Espessura ajustada com sucesso, inserindo pe√ßa');
            const thicknessReduction = finalThickness - maxAllowedThickness;
            if (thicknessReduction > 0) {
              setFeedbackMessage(`‚úÖ ${newPiece.name} inserida com espessura ajustada (${maxAllowedThickness}mm, -${thicknessReduction.toFixed(1)}mm)`);
            } else {
              setFeedbackMessage(`‚úÖ ${newPiece.name} inserida sem ajustes necess√°rios`);
            }
            setTimeout(() => setFeedbackMessage(null), 4000);
            
            // Aplicar corte com a pe√ßa ajustada
            if (targetSpace.id === mainSpace.id) {
              const updatedMainSpace = SpaceCuttingSystem.applyCutToSpace(mainSpace, finalAdjustedPiece, finalCutThickness);
              setMainSpace(updatedMainSpace);
            } else {
              // Aplicar corte ao espa√ßo interno e atualizar suas dimens√µes
              console.log('üîß Aplicando corte ao espa√ßo interno:', {
                targetSpaceName: targetSpace.name,
                targetSpaceDimensions: targetSpace.currentDimensions,
                pieceType: finalAdjustedPiece.type,
                pieceThickness: finalCutThickness
              });
              
              const updatedTargetSpace = SpaceCuttingSystem.applyCutToSpace(targetSpace, finalAdjustedPiece, finalCutThickness);
              
              console.log('‚úÖ Espa√ßo interno atualizado:', {
                newDimensions: updatedTargetSpace.currentDimensions,
                newPosition: updatedTargetSpace.position
              });
              
              // Atualizar o espa√ßo interno com as novas dimens√µes
              setActiveSpaces(prevSpaces => prevSpaces.map(s =>
                s.id === targetSpace.id
                  ? updatedTargetSpace
                  : s
              ));
              
              // Tamb√©m adicionar ao mainSpace para renderiza√ß√£o
              setMainSpace(prev => ({
                ...prev,
                pieces: [...prev.pieces, finalAdjustedPiece],
              }));
            }
            return;
          } else {
            console.error('‚ùå Mesmo com espessura ajustada, ainda h√° problemas');
          }
        }
        
        // Se chegou at√© aqui, tentar calcular posi√ß√£o livre de colis√µes (fallback)
        const collisionFreePosition = SpaceCuttingSystem.calculateCollisionFreePosition(targetSpace, newPiece);
        
        console.log('üéØ Posi√ß√£o ajustada calculada:', {
          original: piecePosition,
          adjusted: collisionFreePosition
        });
        
        // Verificar se a nova posi√ß√£o ainda est√° dentro dos limites do espa√ßo
        const adjustedPiece: FurniturePiece = {
          ...newPiece,
          position: collisionFreePosition,
          dimensions: pieceDimensions,
        };
        
        // Verificar se a pe√ßa ajustada est√° dentro dos limites do espa√ßo
        const isWithinBounds = SpaceCuttingSystem.isPieceWithinSpaceBounds(targetSpace, adjustedPiece);
        
        console.log('üìè Verifica√ß√£o de limites:', {
          pieceType: adjustedPiece.type,
          isWithinBounds,
          adjustedPosition: adjustedPiece.position,
          dimensions: adjustedPiece.dimensions,
          spaceOriginalDimensions: mainSpace.originalDimensions
        });
        
        // Verificar novamente se a posi√ß√£o ajustada resolve o problema
        const stillHasCollision = SpaceCuttingSystem.checkCollisionWithExistingPieces(adjustedPiece, targetSpace.pieces);
        
        console.log('üîÑ Verifica√ß√£o final:', {
          stillHasCollision,
          isWithinBounds,
          canInsert: !stillHasCollision && isWithinBounds
        });
        
        if (stillHasCollision || !isWithinBounds) {
          console.error('‚ùå N√£o foi poss√≠vel encontrar posi√ß√£o v√°lida para a pe√ßa');
          setFeedbackMessage(`‚ùå N√£o √© poss√≠vel inserir ${newPiece.name} - espa√ßo insuficiente`);
          // Limpar mensagem ap√≥s 3 segundos
          setTimeout(() => setFeedbackMessage(null), 3000);
          return;
        } else {
          console.log('‚úÖ Posi√ß√£o ajustada encontrada, inserindo pe√ßa na nova posi√ß√£o');
          setFeedbackMessage(`‚úÖ ${newPiece.name} foi inserida em posi√ß√£o ajustada para evitar colis√£o`);
          setTimeout(() => setFeedbackMessage(null), 3000);
          // Aplicar corte com a pe√ßa ajustada
          if (targetSpace.id === mainSpace.id) {
            const updatedMainSpace = SpaceCuttingSystem.applyCutToSpace(mainSpace, adjustedPiece, finalCutThickness);
            setMainSpace(updatedMainSpace);
          } else {
            // Aplicar corte ao espa√ßo interno e atualizar suas dimens√µes
            console.log('üîß Aplicando corte ao espa√ßo interno (fallback):', {
              targetSpaceName: targetSpace.name,
              targetSpaceDimensions: targetSpace.currentDimensions,
              pieceType: adjustedPiece.type,
              pieceThickness: finalCutThickness
            });
            
            const updatedTargetSpace = SpaceCuttingSystem.applyCutToSpace(targetSpace, adjustedPiece, finalCutThickness);
            
            console.log('‚úÖ Espa√ßo interno atualizado (fallback):', {
              newDimensions: updatedTargetSpace.currentDimensions,
              newPosition: updatedTargetSpace.position
            });
            
            // Atualizar o espa√ßo interno com as novas dimens√µes
            setActiveSpaces(prevSpaces => prevSpaces.map(s =>
              s.id === targetSpace.id
                ? updatedTargetSpace
                : s
            ));
            
            // Tamb√©m adicionar ao mainSpace para renderiza√ß√£o
            setMainSpace(prev => ({
              ...prev,
              pieces: [...prev.pieces, adjustedPiece],
            }));
          }
        }
      } else {
        console.log('‚úÖ Nenhuma colis√£o detectada, inserindo pe√ßa normalmente');
        // Sem colis√£o, aplicar corte normalmente
        if (targetSpace.id === mainSpace.id) {
          const updatedMainSpace = SpaceCuttingSystem.applyCutToSpace(mainSpace, newPiece, finalCutThickness);
          setMainSpace(updatedMainSpace);
        } else {
          // Aplicar corte ao espa√ßo interno e atualizar suas dimens√µes
          console.log('üîß Aplicando corte ao espa√ßo interno (sem colis√£o):', {
            targetSpaceName: targetSpace.name,
            targetSpaceDimensions: targetSpace.currentDimensions,
            pieceType: newPiece.type,
            pieceThickness: finalCutThickness
          });
          
          const updatedTargetSpace = SpaceCuttingSystem.applyCutToSpace(targetSpace, newPiece, finalCutThickness);
          
          console.log('‚úÖ Espa√ßo interno atualizado (sem colis√£o):', {
            newDimensions: updatedTargetSpace.currentDimensions,
            newPosition: updatedTargetSpace.position
          });
          
          // Atualizar o espa√ßo interno com as novas dimens√µes
          setActiveSpaces(prevSpaces => prevSpaces.map(s =>
            s.id === targetSpace.id
              ? updatedTargetSpace
              : s
          ));
          
          // Tamb√©m adicionar ao mainSpace para renderiza√ß√£o
          setMainSpace(prev => ({
            ...prev,
            pieces: [...prev.pieces, tempPiece],
          }));
        }
      }
    }
  }, [mainSpace, activeSpaces, defaultThickness, getSelectedSpace]);

  const removePiece = useCallback((pieceId: string) => {
    console.log('üóëÔ∏è Removendo pe√ßa:', pieceId);
    
    // Buscar a pe√ßa em todos os espa√ßos dispon√≠veis
    let pieceToRemove: FurniturePiece | undefined;
    let foundInSpace: 'main' | 'child' | null = null;
    
    // Primeiro, procurar no espa√ßo principal
    pieceToRemove = mainSpace.pieces.find(p => p.id === pieceId);
    if (pieceToRemove) {
      foundInSpace = 'main';
      console.log('üîç Pe√ßa encontrada no espa√ßo principal');
    } else {
      // Se n√£o encontrou no principal, procurar nos espa√ßos filhos
      for (const childSpace of activeSpaces) {
        pieceToRemove = childSpace.pieces.find(p => p.id === pieceId);
        if (pieceToRemove) {
          foundInSpace = 'child';
          console.log('üîç Pe√ßa encontrada no espa√ßo filho:', childSpace.name);
          break;
        }
      }
    }
    
    if (!pieceToRemove) {
      console.warn('‚ùå Pe√ßa n√£o encontrada para remo√ß√£o:', pieceId);
      console.log('üîç Debug - Espa√ßos dispon√≠veis:', {
        mainSpacePieces: mainSpace.pieces.map(p => ({ id: p.id, name: p.name, parentSpaceId: p.parentSpaceId })),
        activeSpaces: activeSpaces.map(s => ({
          id: s.id,
          name: s.name,
          pieces: s.pieces.map(p => ({ id: p.id, name: p.name, parentSpaceId: p.parentSpaceId }))
        }))
      });
      return;
    }
    console.log('[DEBUG] Fluxo de remo√ß√£o:', { foundInSpace, pieceType: pieceToRemove.type });

    // Verificar se a pe√ßa est√° em um espa√ßo filho
    const isInChildSpace = foundInSpace === 'child' || (pieceToRemove.parentSpaceId && pieceToRemove.parentSpaceId !== mainSpace.id);
    
    // NOVA L√ìGICA PARA REMO√á√ÉO DE PE√áAS INTERNAS (prateleira/divis√≥ria)
    if (isInChildSpace && [PieceType.SHELF, PieceType.DIVIDER_VERTICAL].includes(pieceToRemove.type)) {
      // 1. Identificar o espa√ßo pai correto
      const parentSpaceId = pieceToRemove.parentSpaceId;
      let parentSpace = parentSpaceId === mainSpace.id ? mainSpace : activeSpaces.find(s => s.id === parentSpaceId);
      if (!parentSpace) {
        parentSpace = mainSpace;
      }
      // 2. Coletar todas as pe√ßas restantes do espa√ßo pai (exceto a removida)
      const structuralAndDividerPieces = (parentSpace.pieces || []).filter(p =>
        ([PieceType.LATERAL_LEFT, PieceType.LATERAL_RIGHT, PieceType.LATERAL_FRONT, PieceType.LATERAL_BACK, PieceType.BOTTOM, PieceType.TOP, PieceType.DIVIDER_VERTICAL].includes(p.type)) && p.id !== pieceId
      );
      const shelfPieces: FurniturePiece[] = [];
      // Coletar prateleiras dos subespa√ßos filhos
      const childSpacesOfThisParent = activeSpaces.filter(s => s.parentSpaceId === parentSpace.id);
      childSpacesOfThisParent.forEach(space => {
        const internalShelves = space.pieces.filter(p => p.type === PieceType.SHELF && p.id !== pieceId);
        shelfPieces.push(...internalShelves);
      });
      // 3. Reconstruir o espa√ßo pai do zero
      let reconstructedSpace: FurnitureSpace = {
        ...parentSpace,
        currentDimensions: parentSpace.originalDimensions,
        position: parentSpace.position,
        pieces: [],
        isActive: true,
        subSpaces: undefined,
      };
      // 4. Aplicar pe√ßas estruturais e divis√≥rias do pr√≥prio espa√ßo pai
      for (const piece of structuralAndDividerPieces) {
        const pieceThickness = piece.thickness || defaultThickness;
        if ([PieceType.LATERAL_LEFT, PieceType.LATERAL_RIGHT, PieceType.LATERAL_FRONT, PieceType.LATERAL_BACK, PieceType.BOTTOM, PieceType.TOP].includes(piece.type)) {
          reconstructedSpace = SpaceCuttingSystem.applyCutToSpace(reconstructedSpace, piece, pieceThickness);
        } else if (piece.type === PieceType.DIVIDER_VERTICAL) {
          const dividedSpaces = SpaceCuttingSystem.divideSpace(reconstructedSpace, piece, pieceThickness);
          if (dividedSpaces.length > 0) {
            reconstructedSpace = {
              ...reconstructedSpace,
              subSpaces: dividedSpaces,
              isActive: false,
            };
          }
        }
      }
      // 5. Aplicar prateleiras dos subespa√ßos
      for (const piece of shelfPieces) {
        const pieceThickness = piece.thickness || defaultThickness;
        const dividedSpaces = SpaceCuttingSystem.divideSpace(reconstructedSpace, piece, pieceThickness);
        if (dividedSpaces.length > 0) {
          if (reconstructedSpace.subSpaces && reconstructedSpace.subSpaces.length > 0) {
            const newSubSpaces: FurnitureSpace[] = [];
            for (const subSpace of reconstructedSpace.subSpaces) {
              const subDividedSpaces = SpaceCuttingSystem.divideSpace(subSpace, piece, pieceThickness);
              if (subDividedSpaces.length > 0) {
                newSubSpaces.push(...subDividedSpaces);
              } else {
                newSubSpaces.push(subSpace);
              }
            }
            reconstructedSpace = {
              ...reconstructedSpace,
              subSpaces: newSubSpaces,
              isActive: false,
            };
          } else {
            reconstructedSpace = {
              ...reconstructedSpace,
              subSpaces: dividedSpaces,
              isActive: false,
            };
          }
        }
      }
      // 6. Remover recursivamente todos os subespa√ßos criados pela pe√ßa removida
      function collectDescendantSpacesByPieceId(spaces: FurnitureSpace[], pieceId: string): string[] {
        const directChildren = spaces.filter((s: FurnitureSpace) => s.createdByPieceId === pieceId);
        let allIds: string[] = directChildren.map((s: FurnitureSpace) => s.id);
        for (const child of directChildren) {
          allIds = allIds.concat(collectDescendantSpacesByPieceId(spaces, child.id));
        }
        return allIds;
      }
      console.log('[DEBUG] Antes da filtragem, activeSpaces:', activeSpaces.map(s => ({id: s.id, name: s.name, createdByPieceId: s.createdByPieceId, parentSpaceId: s.parentSpaceId})));
      setActiveSpaces(prevSpaces => {
        const idsToRemove = collectDescendantSpacesByPieceId(prevSpaces, pieceId);
        console.log('[DEBUG] idsToRemove (createdByPieceId):', idsToRemove);
        const filteredSpaces = prevSpaces.filter(s => !idsToRemove.includes(s.id) && s.createdByPieceId !== pieceId && s.parentSpaceId !== pieceId);
        console.log('[DEBUG] Depois da filtragem, activeSpaces:', filteredSpaces.map(s => ({id: s.id, name: s.name, createdByPieceId: s.createdByPieceId, parentSpaceId: s.parentSpaceId})));
        const newSubSpaces = reconstructedSpace.subSpaces || [];
        const updatedNewSpaces = newSubSpaces.map(space => ({
          ...space,
          isActive: true,
          parentSpaceId: parentSpace.id
        }));
        // Remover duplicados por id
        const allSpaces = [...filteredSpaces, ...updatedNewSpaces];
        const uniqueSpaces = allSpaces.filter((space, index, self) => self.findIndex(s => s.id === space.id) === index);
        return uniqueSpaces;
      });
      // 7. Atualizar o pr√≥prio espa√ßo pai
      if (parentSpace.id === mainSpace.id) {
        setMainSpace(reconstructedSpace);
      } else {
        setActiveSpaces(prevSpaces => prevSpaces.map(space => space.id === parentSpace.id ? reconstructedSpace : space));
      }
      // 8. Ajustar sele√ß√£o se necess√°rio
      if (selectedSpaceId && childSpacesOfThisParent.some(s => s.id === selectedSpaceId)) {
        const newSubSpaces = reconstructedSpace.subSpaces || [];
        if (newSubSpaces.length > 0) {
          setSelectedSpaceId(newSubSpaces[0].id);
        } else {
          setSelectedSpaceId(parentSpace.id);
        }
      }
      // 9. Remover do mainSpace para renderiza√ß√£o
      setMainSpace(prev => ({
        ...prev,
        pieces: prev.pieces.filter(p => p.id !== pieceId)
      }));
      return;
    }

    if (isInChildSpace) {
      console.log('üîß Removendo pe√ßa de espa√ßo filho');
      
      // Encontrar o espa√ßo filho que cont√©m a pe√ßa
      let childSpace: FurnitureSpace | undefined;
      
      if (foundInSpace === 'child') {
        // Se j√° sabemos onde est√°, usar essa informa√ß√£o
        childSpace = activeSpaces.find(space => 
          space.pieces.some(p => p.id === pieceId)
        );
      } else {
        // Procurar pelo parentSpaceId
        childSpace = activeSpaces.find(space => space.id === pieceToRemove.parentSpaceId);
      }
      
      if (!childSpace) {
        console.warn('‚ùå Espa√ßo filho n√£o encontrado para pe√ßa:', pieceId);
        console.log('üîç Debug - Tentando encontrar espa√ßo filho:', {
          pieceParentSpaceId: pieceToRemove.parentSpaceId,
          availableChildSpaces: activeSpaces.map(s => ({ id: s.id, name: s.name })),
          pieceFoundIn: foundInSpace
        });
        
        // Fallback: tentar remover do mainSpace mesmo que seja de espa√ßo filho
        console.log('üîÑ Fallback: removendo do espa√ßo principal');
        setMainSpace(prev => ({
          ...prev,
          pieces: prev.pieces.filter(p => p.id !== pieceId)
        }));
        return;
      }
      
      console.log('üîç Espa√ßo filho encontrado:', {
        id: childSpace.id,
        name: childSpace.name,
        currentDimensions: childSpace.currentDimensions,
        piecesCount: childSpace.pieces.length
      });
      
      // Verificar se √© uma pe√ßa estrutural que reduziu o espa√ßo
      const isStructuralPiece = [
        PieceType.LATERAL_LEFT,
        PieceType.LATERAL_RIGHT,
        PieceType.LATERAL_FRONT,
        PieceType.LATERAL_BACK,
        PieceType.BOTTOM,
        PieceType.TOP
      ].includes(pieceToRemove.type);
      
      if (isStructuralPiece) {
        console.log('üîß Removendo pe√ßa estrutural de espa√ßo filho - recuperando dimens√µes');
        
        // Calcular as dimens√µes que devem ser recuperadas
        const pieceThickness = pieceToRemove.thickness || defaultThickness;
        let recoveredDimensions = { ...childSpace.currentDimensions };
        let recoveredPosition = { ...childSpace.position };
        
        // Reverter o corte baseado no tipo de pe√ßa
        switch (pieceToRemove.type) {
          case PieceType.LATERAL_LEFT:
            recoveredDimensions.width += pieceThickness;
            // Ajustar posi√ß√£o se necess√°rio (mover para a esquerda)
            recoveredPosition.x -= pieceThickness / 2;
            break;
          case PieceType.LATERAL_RIGHT:
            recoveredDimensions.width += pieceThickness;
            // Ajustar posi√ß√£o se necess√°rio (mover para a direita)
            recoveredPosition.x += pieceThickness / 2;
            break;
          case PieceType.LATERAL_FRONT:
            recoveredDimensions.depth += pieceThickness;
            // Ajustar posi√ß√£o se necess√°rio (mover para frente)
            recoveredPosition.z += pieceThickness / 2;
            break;
          case PieceType.LATERAL_BACK:
            recoveredDimensions.depth += pieceThickness;
            // Ajustar posi√ß√£o se necess√°rio (mover para tr√°s)
            recoveredPosition.z -= pieceThickness / 2;
            break;
          case PieceType.BOTTOM:
            recoveredDimensions.height += pieceThickness;
            // Ajustar posi√ß√£o se necess√°rio (mover para baixo)
            recoveredPosition.y -= pieceThickness / 2;
            break;
          case PieceType.TOP:
            recoveredDimensions.height += pieceThickness;
            // Ajustar posi√ß√£o se necess√°rio (mover para cima)
            recoveredPosition.y += pieceThickness / 2;
            break;
        }
        
        console.log('üìè Dimens√µes recuperadas:', {
          original: childSpace.currentDimensions,
          recovered: recoveredDimensions,
          originalPosition: childSpace.position,
          recoveredPosition: recoveredPosition,
          pieceType: pieceToRemove.type,
          pieceThickness
        });
        
        // Validar se as dimens√µes recuperadas s√£o v√°lidas
        const isValidRecovery = recoveredDimensions.width > 0 && 
                               recoveredDimensions.height > 0 && 
                               recoveredDimensions.depth > 0;
        
        if (!isValidRecovery) {
          console.warn('‚ùå Dimens√µes recuperadas inv√°lidas:', recoveredDimensions);
          // Usar dimens√µes m√≠nimas seguras
          recoveredDimensions = {
            width: Math.max(50, recoveredDimensions.width),
            height: Math.max(50, recoveredDimensions.height),
            depth: Math.max(50, recoveredDimensions.depth)
          };
          console.log('üîß Usando dimens√µes m√≠nimas seguras:', recoveredDimensions);
        }
        
        // Atualizar o espa√ßo filho com as dimens√µes recuperadas
        setActiveSpaces(prevSpaces => prevSpaces.map(space => {
          if (space.id === childSpace!.id) {
            console.log('‚úÖ Recuperando dimens√µes do espa√ßo filho:', space.name);
            return {
              ...space,
              currentDimensions: recoveredDimensions,
              position: recoveredPosition,
              pieces: space.pieces.filter(p => p.id !== pieceId)
            };
          }
          return space;
        }));
      } else {
        console.log('üîß Removendo pe√ßa n√£o-estrutural de espa√ßo filho');
        
        // Verificar se √© uma pe√ßa divisora que criou espa√ßos filhos
        const isDividerPiece = [PieceType.SHELF, PieceType.DIVIDER_VERTICAL].includes(pieceToRemove.type);
        
        if (isDividerPiece) {
          // Nova l√≥gica: reconstruir o espa√ßo pai do zero, reaplicando todas as pe√ßas restantes
          const parentSpaceId = childSpace.parentSpaceId;
          if (!parentSpaceId) {
            console.warn('‚ùå Espa√ßo pai n√£o encontrado para reconstru√ß√£o');
            return;
          }
          // Buscar o espa√ßo pai original
          const parentSpace = parentSpaceId === mainSpace.id ? mainSpace : activeSpaces.find(s => s.id === parentSpaceId);
          if (!parentSpace) {
            console.warn('‚ùå Espa√ßo pai n√£o encontrado para reconstru√ß√£o');
            return;
          }
          // Fun√ß√£o recursiva para coletar todas as pe√ßas internas (prateleiras/divis√≥rias) de um espa√ßo e seus filhos, exceto a removida
          function collectAllInternalPiecesRecursive(space: FurnitureSpace, pieceIdToRemove: string): FurniturePiece[] {
            let pieces: FurniturePiece[] = [];
            if (space.pieces && space.pieces.length > 0) {
              pieces = pieces.concat(space.pieces.filter(p => [PieceType.SHELF, PieceType.DIVIDER_VERTICAL].includes(p.type) && p.id !== pieceIdToRemove));
            }
            if (space.subSpaces && space.subSpaces.length > 0) {
              for (const sub of space.subSpaces) {
                pieces = pieces.concat(collectAllInternalPiecesRecursive(sub, pieceIdToRemove));
              }
            }
            return pieces;
          }
          // 2. Coletar todas as pe√ßas internas daquele ramo (inclusive aninhadas), exceto a removida
          const allInternalPieces = collectAllInternalPiecesRecursive(parentSpace, pieceId);
          // Criar espa√ßo base limpo
          let reconstructedSpace: FurnitureSpace = {
            ...parentSpace,
            currentDimensions: parentSpace.originalDimensions,
            position: parentSpace.position,
            pieces: [],
            isActive: true,
            subSpaces: undefined, // Garante que n√£o h√° subespa√ßos herdados
          };
          // Reaplicar todas as pe√ßas restantes
          for (const piece of allInternalPieces) {
            const pieceThickness = piece.thickness || defaultThickness;
            if ([PieceType.SHELF, PieceType.DIVIDER_VERTICAL].includes(piece.type)) {
              // Dividir espa√ßo - aplicar sequencialmente
              const dividedSpaces = SpaceCuttingSystem.divideSpace(reconstructedSpace, piece, pieceThickness);
              if (dividedSpaces.length > 0) {
                // Se j√° h√° subespa√ßos, aplicar a divis√£o a cada um deles
                if (reconstructedSpace.subSpaces && reconstructedSpace.subSpaces.length > 0) {
                  const newSubSpaces: FurnitureSpace[] = [];
                  for (const subSpace of reconstructedSpace.subSpaces) {
                    const subDividedSpaces = SpaceCuttingSystem.divideSpace(subSpace, piece, pieceThickness);
                    if (subDividedSpaces.length > 0) {
                      newSubSpaces.push(...subDividedSpaces);
                    } else {
                      newSubSpaces.push(subSpace);
                    }
                  }
                  reconstructedSpace = {
                    ...reconstructedSpace,
                    subSpaces: newSubSpaces,
                    isActive: false,
                  };
                } else {
                  // Primeira divis√£o
                  reconstructedSpace = {
                    ...reconstructedSpace,
                    subSpaces: dividedSpaces,
                    isActive: false,
                  };
                }
              }
            }
          }
          // Atualizar activeSpaces para conter apenas os novos subespa√ßos desse pai e manter os outros
          // Remover recursivamente todos os subespa√ßos descendentes do espa√ßo pai
          function collectDescendantSpacesByPieceId(spaces: FurnitureSpace[], pieceId: string): string[] {
            const directChildren = spaces.filter((s: FurnitureSpace) => s.parentSpaceId === pieceId);
            let allIds: string[] = directChildren.map((s: FurnitureSpace) => s.id);
            for (const child of directChildren) {
              allIds = allIds.concat(collectDescendantSpacesByPieceId(spaces, child.id));
            }
            return allIds;
          }
          // LOG antes da filtragem
          console.log('[DEBUG] Antes da filtragem, activeSpaces:', activeSpaces.map(s => ({id: s.id, name: s.name, createdByPieceId: s.createdByPieceId, parentSpaceId: s.parentSpaceId})));
          setActiveSpaces(prevSpaces => {
            const idsToRemove = collectDescendantSpacesByPieceId(prevSpaces, pieceId);
            console.log('[DEBUG] idsToRemove (createdByPieceId):', idsToRemove);
            const filteredSpaces = prevSpaces.filter(s => !idsToRemove.includes(s.id) && s.createdByPieceId !== pieceId);
            console.log('[DEBUG] Depois da filtragem, activeSpaces:', filteredSpaces.map(s => ({id: s.id, name: s.name, createdByPieceId: s.createdByPieceId, parentSpaceId: s.parentSpaceId})));
            const newSubSpaces = reconstructedSpace.subSpaces || [];
            const updatedNewSpaces = newSubSpaces.map(space => ({
              ...space,
              isActive: true,
              parentSpaceId: parentSpaceId
            }));
            return [...filteredSpaces, ...updatedNewSpaces];
          });
          // Atualizar o pr√≥prio espa√ßo pai
          if (parentSpaceId === mainSpace.id) {
            setMainSpace(reconstructedSpace);
          } else {
            setActiveSpaces(prevSpaces => prevSpaces.map(space =>
              space.id === parentSpaceId ? reconstructedSpace : space
            ));
          }
          // Ajustar sele√ß√£o se necess√°rio
          if (selectedSpaceId && activeSpaces.some(s => s.id === selectedSpaceId)) {
            const newSubSpaces = reconstructedSpace.subSpaces || [];
            if (newSubSpaces.length > 0) {
              setSelectedSpaceId(newSubSpaces[0].id);
            } else {
              setSelectedSpaceId(parentSpaceId);
            }
          }
        } else {
          // Para pe√ßas n√£o-divisoras, apenas remover a pe√ßa
          setActiveSpaces(prevSpaces => prevSpaces.map(space => {
            if (space.id === childSpace!.id) {
              console.log('‚úÖ Removendo pe√ßa do espa√ßo filho:', space.name);
              return {
                ...space,
                pieces: space.pieces.filter(p => p.id !== pieceId)
              };
            }
            return space;
          }));
        }
      }
      
      // Tamb√©m remover do mainSpace para renderiza√ß√£o
      setMainSpace(prev => ({
        ...prev,
        pieces: prev.pieces.filter(p => p.id !== pieceId)
      }));
      
    } else {
      console.log('üîß Removendo pe√ßa do espa√ßo principal');
      
      // Para pe√ßas do espa√ßo principal, verificar se s√£o pe√ßas que criaram espa√ßos filhos
      const isDividerPiece = [PieceType.SHELF, PieceType.DIVIDER_VERTICAL].includes(pieceToRemove.type);
      
      if (isDividerPiece) {
        console.log('‚ö†Ô∏è Removendo pe√ßa divisora - isso pode afetar espa√ßos filhos');
        
        // Remover a pe√ßa do espa√ßo principal
        setMainSpace(prev => ({
          ...prev,
          pieces: prev.pieces.filter(p => p.id !== pieceId)
        }));
        
        // Reconstruir espa√ßos filhos sem a pe√ßa removida
        const remainingPieces = mainSpace.pieces.filter(p => p.id !== pieceId);
        const dividerPieces = remainingPieces.filter(p => 
          [PieceType.SHELF, PieceType.DIVIDER_VERTICAL].includes(p.type)
        );
        
        if (dividerPieces.length === 0) {
          // Se n√£o h√° mais pe√ßas divisoras, limpar espa√ßos filhos e restaurar espa√ßo principal
          console.log('üßπ N√£o h√° mais pe√ßas divisoras, limpando espa√ßos filhos e restaurando espa√ßo principal');
          setActiveSpaces([]);
          setSelectedSpaceId(null);
          // Restaurar o espa√ßo principal como ativo
          setMainSpace(prev => ({
            ...prev,
            isActive: true,
            pieces: remainingPieces // Manter as pe√ßas estruturais restantes
          }));
        } else {
          // Reconstruir espa√ßos filhos com as pe√ßas restantes
          console.log('üîÑ Reconstruindo espa√ßos filhos com pe√ßas restantes');
          
          // Come√ßar com o espa√ßo principal limpo
          let reconstructedSpace: FurnitureSpace = {
            ...mainSpace,
            currentDimensions: mainSpace.originalDimensions,
            position: { x: 0, y: 0, z: 0 },
            pieces: [],
            isActive: true,
          };
          
          // Reaplicar pe√ßas estruturais primeiro
          const structuralPieces = remainingPieces.filter(p => 
            [PieceType.LATERAL_LEFT, PieceType.LATERAL_RIGHT, PieceType.LATERAL_FRONT, 
             PieceType.LATERAL_BACK, PieceType.BOTTOM, PieceType.TOP].includes(p.type)
          );
          
          for (const piece of structuralPieces) {
            const pieceThickness = piece.thickness || defaultThickness;
            reconstructedSpace = SpaceCuttingSystem.applyCutToSpace(reconstructedSpace, piece, pieceThickness);
          }
          
          // Aplicar pe√ßas divisoras para recriar espa√ßos filhos
          const newActiveSpaces: FurnitureSpace[] = [];
          
          for (const piece of dividerPieces) {
            const pieceThickness = piece.thickness || defaultThickness;
            
            // Dividir o espa√ßo com a pe√ßa
            const dividedSpaces = SpaceCuttingSystem.divideSpace(reconstructedSpace, piece, pieceThickness);
            
            if (dividedSpaces.length > 0) {
              // Calcular posi√ß√£o e dimens√µes da pe√ßa
              const piecePosition = SpaceCuttingSystem.calculatePiecePosition(reconstructedSpace, piece);
              const pieceDimensions = SpaceCuttingSystem.calculatePieceDimensions(reconstructedSpace, piece.type, pieceThickness);
              
              const updatedPiece: FurniturePiece = {
                ...piece,
                position: piecePosition,
                dimensions: pieceDimensions,
              };
              
              // Adicionar a pe√ßa ao espa√ßo principal
              reconstructedSpace = {
                ...reconstructedSpace,
                pieces: [...reconstructedSpace.pieces, updatedPiece],
                isActive: false,
              };
              
              // Adicionar espa√ßos divididos - GARANTIR QUE SEJAM ATIVOS
              const activeDividedSpaces = dividedSpaces.map(space => ({
                ...space,
                isActive: true, // IMPORTANTE: marcar como ativo
                parentSpaceId: mainSpace.id
              }));
              
              console.log('‚úÖ Espa√ßos filhos recriados do principal (ativos):', activeDividedSpaces.map(s => ({
                id: s.id,
                name: s.name,
                isActive: s.isActive,
                dimensions: s.currentDimensions,
                parentSpaceId: s.parentSpaceId
              })));
              
              newActiveSpaces.push(...activeDividedSpaces);
            }
          }
          
          // Atualizar estados
          setMainSpace(reconstructedSpace);
          setActiveSpaces(newActiveSpaces);
          
          // Ajustar sele√ß√£o se necess√°rio
          if (selectedSpaceId && !newActiveSpaces.find(s => s.id === selectedSpaceId) && selectedSpaceId !== reconstructedSpace.id) {
            setSelectedSpaceId(null);
          }
        }
      } else {
        // Para pe√ßas estruturais do espa√ßo principal, reconstruir normalmente
        console.log('üîß Reconstruindo espa√ßo principal ap√≥s remo√ß√£o de pe√ßa estrutural');
        
        const remainingPieces = mainSpace.pieces.filter(p => p.id !== pieceId);
        
        // Come√ßar com um espa√ßo limpo
        let reconstructedSpace: FurnitureSpace = {
          ...mainSpace,
          currentDimensions: mainSpace.originalDimensions,
          position: { x: 0, y: 0, z: 0 },
          pieces: [],
          isActive: true,
        };
        
        // Reaplicar cada pe√ßa restante na ordem original
        for (const piece of remainingPieces) {
          const pieceThickness = piece.thickness || defaultThickness;
          reconstructedSpace = SpaceCuttingSystem.applyCutToSpace(reconstructedSpace, piece, pieceThickness);
        }
        
        // Atualizar espa√ßos ativos (subSpaces) se existirem
        let newActiveSpaces: FurnitureSpace[] = [];
        if (reconstructedSpace.subSpaces && reconstructedSpace.subSpaces.length > 0) {
          newActiveSpaces = reconstructedSpace.subSpaces;
        }
        
        // Aplicar estado reconstru√≠do
        setMainSpace(reconstructedSpace);
        setActiveSpaces(newActiveSpaces);
        
        // Ajustar sele√ß√£o se necess√°rio
        if (selectedSpaceId && !newActiveSpaces.find(s => s.id === selectedSpaceId) && selectedSpaceId !== reconstructedSpace.id) {
          setSelectedSpaceId(null);
        }
      }
    }
    
    setFeedbackMessage('‚úÖ Pe√ßa removida com sucesso');
    setTimeout(() => setFeedbackMessage(null), 2000);
  }, [mainSpace, activeSpaces, defaultThickness, selectedSpaceId]);

  const updateDimensions = useCallback((newDimensions: Dimensions) => {
    console.log('üìê Atualizando dimens√µes:', newDimensions);
    
    const newSpace: FurnitureSpace = {
      ...mainSpace,
      originalDimensions: newDimensions,
      currentDimensions: newDimensions,
      position: { x: 0, y: 0, z: 0 },
      pieces: [], // Por enquanto limpa as pe√ßas
      isActive: true,
    };

    setActiveSpaces([]);
    setMainSpace(newSpace);

    console.log('üìê Dimens√µes atualizadas, sistema de reconstru√ß√£o precisa ser implementado');
  }, [mainSpace]);

  const clearAllPieces = useCallback(() => {
    setActiveSpaces([]);
    setSelectedSpaceId(null);
    setFeedbackMessage(null); // Limpar mensagens ao resetar
    setMainSpace(currentSpace => ({
      ...currentSpace,
      originalDimensions: currentSpace.originalDimensions,
      currentDimensions: currentSpace.originalDimensions,
      position: { x: 0, y: 0, z: 0 }, // Resetar posi√ß√£o para centro
      pieces: [],
      isActive: true,
    }));
  }, []);

  const setInsertionMode = useCallback((mode: InsertionMode) => {
    setInsertionContext({ mode });
  }, []);

  // Fun√ß√£o utilit√°ria para coletar todas as pe√ßas do m√≥vel, inclusive de subSpaces
  function collectAllPieces(space: FurnitureSpace): FurniturePiece[] {
    let pieces = [...(space.pieces || [])];
    if (space.subSpaces && space.subSpaces.length > 0) {
      for (const sub of space.subSpaces) {
        pieces = pieces.concat(collectAllPieces(sub));
      }
    }
    return pieces;
  }



  // MELHORIA 2: Ap√≥s qualquer altera√ß√£o estrutural, reatribuir parentSpaceId de todas as pe√ßas internas
  function reassignParentSpaceIds(pieces: FurniturePiece[], rootSpace: FurnitureSpace): FurniturePiece[] {
    return pieces.map(piece => {
      if ([PieceType.SHELF, PieceType.DIVIDER_VERTICAL].includes(piece.type)) {
        const subSpace = SpaceCuttingSystem.findSubSpaceByPosition(rootSpace, piece);
        return { ...piece, parentSpaceId: subSpace.id };
      }
      return piece;
    });
  }

  // Exemplo de uso ap√≥s reconstru√ß√£o:
  // const reassignedPieces = reassignParentSpaceIds(mainSpace.pieces, mainSpace);
  // ... use reassignedPieces na pr√≥xima reconstru√ß√£o ...

  return {
    space,
    insertionContext,
    addPiece,
    removePiece,
    clearAllPieces,
    createNewSpace,
    updateDimensions,
    setInsertionMode,
    defaultThickness,
    setDefaultThickness,
    // Fun√ß√µes de sele√ß√£o de espa√ßos
    activeSpaces,
    selectedSpaceId,
    selectSpace,
    getSelectedSpace,
    // Feedback para o usu√°rio
    feedbackMessage,
    clearFeedback: () => setFeedbackMessage(null),
  };
};


